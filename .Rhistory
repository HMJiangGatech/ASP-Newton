# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
library(gcdnet)
library(spams)
install.packages("spams")
# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
library(gcdnet)
library(spams)
source("scripts.R")
sourceCpp("utils.cpp")
set.seed(111)
sim_wc <- generate_sim(n=2000, d=10000, 0.3)
sim_ic <- generate_sim(n=2000, d=10000, 3.0)
load("madelon.RData")
madelon$X[which(is.na(madelon$X))] <- 0 # missing values
madelon$X <- madelon$X[ ,find_nonconstant_column(madelon$X)]
madelon$X <- scale(madelon$X)
load("gisette.RData")
gisette$X[which(is.na(gisette$X))] <- 0 # missing values
gisette$X <- gisette$X[ ,find_nonconstant_column(gisette$X)]
gisette$X <- scale(gisette$X)
# Reproducing Table 1
# Comparisons of Running Time Across Different Methods on Logistic Regression Tasks.
test_lognet(madelon)
test_lognet(gisette)
test_lognet(sim_wc)
test_lognet(sim_ic)
# Reproducing Figure 4
# Comparisions of Convergence Rate Measured in CPU Time.
timing_lognet(sim_ic)
## Notice that the precision have to be fine tunned for getting comparable results
setwd("~/Desktop/2018 MPB Prox-Newton/2018 mpb prox-newton/testcode")
# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
# library(gcdnet)
# library(spams)
source("scripts.R")
sourceCpp("utils.cpp")
# Experiment parameters
# skip some comparison
skip = c("glmnet")
useRealData = FALSE
# for simulated data set
n = 2000
d = 10000
# Linear Regression
set.seed(111)
# Simulated data
sim_wc <- generate_sim(n=n, d=d, c=0.3, seed=111)
sim_ic <- generate_sim(n=n, d=d, c=3.0, seed=112)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=0.9*1e-6)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=0.9*1e-7)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=0.9*1e-8)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=0.9*1e-9)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=5.0*1e-9)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=3.0*1e-9)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=2.5*1e-9)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=2.0*1e-9)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=2.3*1e-9)
test_gausnet(sim_wc,skip=skip,trialN = 10,prec=1.93*1e-7)
test_gausnet(sim_ic,skip=skip,trialN = 10,prec=2.0*1e-9)
sim_wc <- generate_sim_poi(n=n, d=d, c=0.1, seed=111)
sim_ic <- generate_sim_poi(n=n, d=d, c=0.3, seed=112)
test_poi(sim_wc,skip=skip,trialN = 2,prec=2.0*1e-6)
test_poi(sim_ic,skip=skip,trialN = 2,prec=2.0*1e-6)
sim_wc <- generate_sim_poi(n=n, d=d, c=0.03, seed=111)
sim_ic <- generate_sim_poi(n=n, d=d, c=0.1, seed=112)
test_poi(sim_wc,skip=skip,trialN = 2,prec=2.0*1e-6)
test_poi(sim_wc,skip=skip,trialN = 2,prec=1.0*1e-6)
test_poi(sim_wc,skip=skip,trialN = 2,prec=0.9*1e-6)
test_poi(sim_wc,skip=skip,trialN = 10,prec=0.9*1e-6)
## Notice that the precision have to be fine tunned for getting comparable results
setwd("~/Desktop/2018 MPB Prox-Newton/2018 mpb prox-newton/testcode")
# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
# library(gcdnet)
# library(spams)
source("scripts.R")
sourceCpp("utils.cpp")
# Experiment parameters
# skip some comparison
skip = c("glmnet")
useRealData = FALSE
# for simulated data set
n = 2000
d = 10000
# Linear Regression
set.seed(111)
# Poisson Regression
set.seed(111)
# Simulated data
sim_wc <- generate_sim_poi(n=n, d=d, c=0.03, seed=111)
sim_ic <- generate_sim_poi(n=n, d=d, c=0.1, seed=112)
test_poi(sim_wc,skip=skip,trialN = 1,prec=0.9*1e-6)
test_poi(sim_wc,skip=skip,trialN = 1,prec=1*1e-7)
test_poi(sim_wc,skip=skip,trialN = 1,prec=1*1e-8)
test_poi(sim_wc,skip=skip,trialN = 1,prec=1*1e-10)
test_poi(sim_wc,skip=skip,trialN = 10,prec=1*1e-8)
## Notice that the precision have to be fine tunned for getting comparable results
setwd("~/Desktop/2018 MPB Prox-Newton/2018 mpb prox-newton/testcode")
# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
# library(gcdnet)
# library(spams)
source("scripts.R")
sourceCpp("utils.cpp")
# Experiment parameters
# skip some comparison
skip = c("glmnet")
useRealData = FALSE
# for simulated data set
n = 2000
d = 10000
# Simulated data
sim_wc <- generate_sim_poi(n=n, d=d, c=0.03, seed=111)
sim_ic <- generate_sim_poi(n=n, d=d, c=0.1, seed=112)
test_poi(sim_wc,skip=skip,trialN = 1,prec=1*1e-6)
test_poi(sim_wc,skip=skip,trialN = 1,prec=1*1e-5)
test_poi(sim_wc,skip=skip,trialN = 1,prec=3*1e-6)
test_poi(sim_wc,skip=skip,trialN = 1,prec=2*1e-6)
test_poi(sim_wc,skip=skip,trialN = 10,prec=2*1e-6)
## Notice that the precision have to be fine tunned for getting comparable results
setwd("~/Desktop/2018 MPB Prox-Newton/2018 mpb prox-newton/testcode")
# loading and installing required packages
library(Rcpp)
library(glmnet)
library(picasso)
# library(gcdnet)
# library(spams)
source("scripts.R")
sourceCpp("utils.cpp")
# Experiment parameters
# skip some comparison
skip = c("glmnet")
useRealData = FALSE
# for simulated data set
n = 2000
d = 10000
# Linear Regression
set.seed(111)
# Simulated data
sim_wc <- generate_sim(n=n, d=d, c=0.3, seed=111)
sim_ic <- generate_sim(n=n, d=d, c=3.0, seed=112)
test_gausnet(sim_wc,skip=skip,trialN = 2,prec=1.93*1e-7)
test_gausnet(sim_ic,skip=skip,trialN = 2,prec=2.0*1e-9)
test_gausnet(sim_wc,skip=skip,trialN = 2,prec=1.0*1e-6)
test_gausnet(sim_ic,skip=skip,trialN = 2,prec=1.0*1e-7)
test_gausnet(sim_wc,skip=skip,trialN = 1,prec=3.0*1e-6)
test_gausnet(sim_ic,skip=skip,trialN = 1,prec=5.0*1e-8)
test_gausnet(sim_wc,skip=skip,trialN = 1,prec=2.5*1e-6)
test_gausnet(sim_wc,skip=skip,trialN = 10,prec=2.6*1e-6)
test_gausnet(sim_ic,skip=skip,trialN = 10,prec=5.0*1e-8)
sim_wc <- generate_sim_lognet(n=n, d=d, c=0.3, seed=111)
sim_ic <- generate_sim_lognet(n=n, d=d, c=3.0, seed=112)
test_lognet(sim_wc,skip=skip,trialN = 1,prec=2.0*1e-6)
test_lognet(sim_ic,skip=skip,trialN = 1,prec=2.0*1e-6)
test_lognet(sim_wc,skip=skip,trialN = 1,prec=2.0*1e-8)
test_lognet(sim_ic,skip=skip,trialN = 1,prec=2.0*1e-8)
test_lognet(sim_wc,skip=skip,trialN = 1,prec=2.0*1e-10)
test_lognet(sim_ic,skip=skip,trialN = 1,prec=2.0*1e-10)
test_lognet(sim_wc,skip=skip,trialN = 10,prec=2.0*1e-8)
test_lognet(sim_ic,skip=skip,trialN = 10,prec=2.0*1e-8)
sim_wc <- generate_sim_poi(n=n, d=d, c=0.03, seed=111)
sim_ic <- generate_sim_poi(n=n, d=d, c=0.1, seed=112)
test_poi(sim_wc,skip=skip,trialN = 2,prec=2*1e-6)
test_poi(sim_ic,skip=skip,trialN = 2,prec=2.0*1e-6)
test_poi(sim_wc,skip=skip,trialN = 2,prec=2*1e-2)
test_poi(sim_ic,skip=skip,trialN = 2,prec=2.0*1e-2)
